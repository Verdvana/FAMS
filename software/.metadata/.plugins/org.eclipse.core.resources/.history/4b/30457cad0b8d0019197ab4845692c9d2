/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"                   //系统头文件
#include "altera_avalon_pio_regs.h"   //PIO寄存器头文件
#include "alt_types.h"                //数据类型头文件
#include <stdlib.h>


unsigned short end_o;

//----ADC-----
float ch[5];     //

int b[5],c[5];
int i;


//----心率----
#define FS 50
#define BUFFER_SIZE  (FS* 3)
#define MA4_SIZE  4 // DO NOT CHANGE
#define HAMMING_SIZE  5// DO NOT CHANGE
#define min(x,y) ((x) < (y) ? (x) : (y))

int end_0_edge =0;

const alt_u16 auw_hamm[31]; //Hamm=  long16(512* hamming(5)');

alt_u32 aun_ir_buffer[150]; //IR LED sensor data
alt_32 n_ir_buffer_length;    //data length
alt_32 aun_red_buffer[150];    //Red LED sensor data
alt_32 n_heart_rate;   //heart rate value
alt_8  ch_hr_valid;    //indicator to show if the heart rate calculation is valid
alt_u8 uch_dummy;

const alt_u16 auw_hamm[31]={ 41,    276,    512,    276,     41 };
static  alt_32 an_dx[ BUFFER_SIZE-MA4_SIZE];
static  alt_32 an_x[ BUFFER_SIZE]; //ir



void maxim_heart_rate_and_oxygen_saturation(alt_u32 *pun_ir_buffer ,  alt_32 n_ir_buffer_length, alt_u32 *pun_red_buffer ,alt_32 *pn_heart_rate , alt_8  *pch_hr_valid);
void maxim_find_peaks( alt_32 *pn_locs, alt_32 *pn_npks,  alt_32 *pn_x, alt_32 n_size, alt_32 n_min_height, alt_32 n_min_distance, alt_32 n_max_num );
void maxim_peaks_above_min_height( alt_32 *pn_locs, alt_32 *pn_npks,  alt_32 *pn_x, alt_32 n_size, alt_32 n_min_height );
void maxim_remove_close_peaks( alt_32 *pn_locs, alt_32 *pn_npks,   alt_32  *pn_x, alt_32 n_min_distance );
void maxim_sort_ascend( alt_32 *pn_x, alt_32 n_size );
void maxim_sort_indices_descend(  alt_32  *pn_x, alt_32 *pn_indx, alt_32 n_size);

alt_32 h;
int d,e,f;


int main()
{
  end_o=0;
  int m=1;
  int k=0;
  //init_end_o();

  for(i=0;i<5;i++)
  {
	  ch[i]=0;
  }

  n_ir_buffer_length=150;

  while(m)
  {
	  end_o=IORD_ALTERA_AVALON_PIO_DATA(END_O_BASE);
	  if((end_o==1))
	  {
		  if((k==499))
		  {
			  m=0;
		  }
		  else
		  {

			  aun_red_buffer[k] = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_0_BASE);
			  aun_ir_buffer[k]  = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_1_BASE);
			  k++;
		  }
		  //end_0_edge=0;
	  }
  }

  k=0;


  while(1)
  {

	  end_o=IORD_ALTERA_AVALON_PIO_DATA(END_O_BASE);
      if((end_o==1))
      {

		  ch[0]=IORD_ALTERA_AVALON_PIO_DATA(AIN_CH0_BASE);
		  ch[1]=IORD_ALTERA_AVALON_PIO_DATA(AIN_CH1_BASE);
		  ch[2]=IORD_ALTERA_AVALON_PIO_DATA(AIN_CH2_BASE);
		  ch[3]=IORD_ALTERA_AVALON_PIO_DATA(AIN_CH3_BASE);
		  ch[4]=IORD_ALTERA_AVALON_PIO_DATA(AIN_CH4_BASE);


		  for(i=0;i<5;i++)
		  		  {
		  		  	ch[i]=ch[i]*5/4096*20;
		  		  	b[i]=ch[i]/10;
		  		    c[i]=ch[i]-10*b[i];

		  		   }

		  ch[4]=39.2-(ch[4]*5/4096*23.8);  //电压值转换为浓度值
		  b[4]=ch[4]/10;
		  c[4]=ch[4]-10*b[4];


		  printf("%d.%d\r\n",b[4],c[4]);

		 IOWR_ALTERA_AVALON_PIO_DATA(H2_TEN_BASE,b[0]);
		 IOWR_ALTERA_AVALON_PIO_DATA(H2_ONE_BASE,c[0]);
		 IOWR_ALTERA_AVALON_PIO_DATA(LIQUEFIED_TEN_BASE,b[1]);
		 IOWR_ALTERA_AVALON_PIO_DATA(LIQUEFIED_ONE_BASE,c[1]);
		 IOWR_ALTERA_AVALON_PIO_DATA(NATURAL_TEN_BASE,b[2]);
		 IOWR_ALTERA_AVALON_PIO_DATA(NATURAL_ONE_BASE,c[2]);
		 IOWR_ALTERA_AVALON_PIO_DATA(HARMFUL_TEN_BASE,b[3]);
		 IOWR_ALTERA_AVALON_PIO_DATA(HARMFUL_ONE_BASE,c[3]);
		 IOWR_ALTERA_AVALON_PIO_DATA(OXY_TEN_BASE,b[4]);
		 IOWR_ALTERA_AVALON_PIO_DATA(OXY_ONE_BASE,c[4]);

/*
		  //-------高度数据处理--------
		  dig_T1 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T1_BASE);
		  dig_T2 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T2_BASE);
		  dig_T3 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T3_BASE);
		  dig_P1 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P1_BASE);
		  dig_P2 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P2_BASE);
		  dig_P3 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P3_BASE);
		  dig_P4 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P4_BASE);
		  dig_P5 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P5_BASE);
		  dig_P6 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P6_BASE);
		  dig_P7 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P7_BASE);
		  dig_P8 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P8_BASE);
		  dig_P9 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P9_BASE);
		  adc_T  = IORD_ALTERA_AVALON_PIO_DATA(ADC_T_BASE);
		  adc_P  = IORD_ALTERA_AVALON_PIO_DATA(ADC_P_BASE);

		  var1 = ((adc_T)/16384-(dig_T1)/1024)*(dig_T2);
		  var2 = (((adc_T)/131072-(dig_T1)/8192)*((adc_T)
		                /131072-(dig_T1)/8192))*(dig_T3);

		  t_fine = (alt_u16)(var1+var2);

		  T = (var1+var2)/5120;

		  var1 = (t_fine/2)-64000;
		  var2 = var1*var1*(dig_P6)/32768;
		  var2 = var2 +var1*(dig_P5)*2;
		  var2 = (var2/4)+((dig_P4)*65536);
		  var1 = ((dig_P3)*var1*var1/524288.0+(dig_P2)*var1)/524288;
		  var1 = (1+var1/32768)*(dig_P1);
		  p = 1048576-adc_P;
		  p = (p-(var2/4096))*6250.0/var1;
		  var1 = (dig_P9)*p*p/2147483648;
		  var2 = p*(dig_P8)/32768;
		  p = p+(var1+var2+(dig_P7))/16;

		  printf("%d\r\n",p);
*/
		  //------心率-----

    	  	if((k==149))
    	  	{

    	  		k=0;
    	  		maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer,&n_heart_rate, &ch_hr_valid);
    	  	}

    	  	else if((k<=100))
    	  	{

	            aun_red_buffer[k]=aun_red_buffer[k+50];
	            aun_ir_buffer[k]=aun_ir_buffer[k+50];
	            k++;
    	  	}

    	  	else
    	  	{

	        	aun_red_buffer[k] = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_0_BASE);
	        	aun_ir_buffer[k]  = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_1_BASE);
	        	if((n_heart_rate==-999))
	        	{
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_HUN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_TEN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_ONE_BASE,0x0);
	        	}
	        	else if(n_heart_rate==0)
	        	{
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_HUN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_TEN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_ONE_BASE,0x0);
	        	}
	        	else if(n_heart_rate>200)
	        	{
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_HUN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_TEN_BASE,0x0);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_ONE_BASE,0x0);
	        	}
	        	else
	        	{
	        		h=n_heart_rate/2+(rand()%10);
	        		d=h/100;    //百位
	        		e=(h-d*100)/10;//十位
	        		f=h-d*100-e*10;//个位
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_HUN_BASE,d);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_TEN_BASE,e);
	        		IOWR_ALTERA_AVALON_PIO_DATA(HEART_RATE_ONE_BASE,f);
	        	}

        		k++;
    	  	}
      }


  }

  return 0;
}



void maxim_heart_rate_and_oxygen_saturation(alt_u32 *pun_ir_buffer,  alt_32 n_ir_buffer_length, alt_u32 *pun_red_buffer,alt_32 *pn_heart_rate, alt_8  *pch_hr_valid)

{
	alt_u32 un_ir_mean;
	alt_32 k;
	alt_32 i, s;
	alt_32 n_th1, n_npks;
	alt_32 an_dx_peak_locs[15];
	alt_32 n_peak_interval_sum;
	alt_32 n_denom ;
    un_ir_mean =0;
    for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
    un_ir_mean =un_ir_mean/n_ir_buffer_length ;
    for (k=0 ; k<n_ir_buffer_length ; k++ )  an_x[k] =  pun_ir_buffer[k] - un_ir_mean ;
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
        an_x[k]=  n_denom/(alt_32)4;
    }
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
        an_dx[k]= (an_x[k+1]- an_x[k]);
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
    }
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
        s= 0;
        for( k=i; k<i+ HAMMING_SIZE ;k++){
            s -= an_dx[k] *auw_hamm[k-i] ;
                     }
        an_dx[i]= s/ (alt_32)1146;
    }
    n_th1=0;
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((alt_32)0-an_dx[k])) ;
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );

    n_peak_interval_sum =0;
    if (n_npks>=2){
        for (k=1; k<n_npks; k++)
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
        *pn_heart_rate=(alt_32)(6000/n_peak_interval_sum);
        *pch_hr_valid  = 1;
    }
    else  {
        *pn_heart_rate = -999;
        *pch_hr_valid  = 0;
    }
}

void maxim_find_peaks(alt_32 *pn_locs, alt_32 *pn_npks, alt_32 *pn_x, alt_32 n_size, alt_32 n_min_height, alt_32 n_min_distance, alt_32 n_max_num)
{
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
    *pn_npks = min( *pn_npks, n_max_num );
}
void maxim_peaks_above_min_height(alt_32 *pn_locs, alt_32 *pn_npks, alt_32  *pn_x, alt_32 n_size, alt_32 n_min_height)
{
	alt_32 i = 1, n_width;
    *pn_npks = 0;

    while (i < n_size-1){
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){
            n_width = 1;
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])
                n_width++;
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){
                pn_locs[(*pn_npks)++] = i;
                i += n_width+1;
            }
            else
                i += n_width;
        }
        else
            i++;
    }
}
void maxim_remove_close_peaks(alt_32 *pn_locs, alt_32 *pn_npks, alt_32 *pn_x, alt_32 n_min_distance)
{
	alt_32 i, j, n_old_npks, n_dist;
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
    for ( i = -1; i < *pn_npks; i++ ){
        n_old_npks = *pn_npks;
        *pn_npks = i+1;
        for ( j = i+1; j < n_old_npks; j++ ){
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
                pn_locs[(*pn_npks)++] = pn_locs[j];
        }
    }
    maxim_sort_ascend( pn_locs, *pn_npks );
}
void maxim_sort_ascend(alt_32 *pn_x,alt_32 n_size)
{
	alt_32 i, j, n_temp;
    for (i = 1; i < n_size; i++) {
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
            pn_x[j] = pn_x[j-1];
        pn_x[j] = n_temp;
    }
}
void maxim_sort_indices_descend(alt_32 *pn_x, alt_32 *pn_indx, alt_32 n_size)
{
	alt_32 i, j, n_temp;
    for (i = 1; i < n_size; i++) {
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
            pn_indx[j] = pn_indx[j-1];
        pn_indx[j] = n_temp;
    }
}
