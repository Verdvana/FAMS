/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"                   //系统头文件
#include "altera_avalon_pio_regs.h"   //PIO寄存器头文件
#include "alt_types.h"                //数据类型头文件


unsigned short end_o;



//----高度-----
alt_u32 adc_T,adc_P;
alt_u16 dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9;
alt_u16 var1,var2,p,T,t_fine;

//----心率----
#define BUFFER_SIZE 10
#define MA4_SIZE 4  // DO NOT CHANGE
#define HAMMING_SIZE  5// DO NOT CHANGE

const alt_u16 auw_hamm[31]={ 41,    276,    512,    276,     41 }; //Hamm=  long16(512* hamming(5)');

alt_u32 pun_ir_buffer[10],pun_red_buffer[10];
alt_u32 un_ir_mean;
alt_u32 n_denom;
alt_32  an_x[10];
alt_32 s,n_th1;
alt_u8	i,k=0;

static  alt_32 an_dx[ BUFFER_SIZE-MA4_SIZE]; // delta

int main()
{
  end_o=0;

  while(1)
  {
	  end_o=IORD_ALTERA_AVALON_PIO_DATA(END_O_BASE);

	  if(end_o)
	  {

		  //-------高度数据处理--------
		  dig_T1 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T1_BASE);
		  dig_T2 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T2_BASE);
		  dig_T3 = IORD_ALTERA_AVALON_PIO_DATA(DIG_T3_BASE);
		  dig_P1 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P1_BASE);
		  dig_P2 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P2_BASE);
		  dig_P3 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P3_BASE);
		  dig_P4 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P4_BASE);
		  dig_P5 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P5_BASE);
		  dig_P6 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P6_BASE);
		  dig_P7 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P7_BASE);
		  dig_P8 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P8_BASE);
		  dig_P9 = IORD_ALTERA_AVALON_PIO_DATA(DIG_P9_BASE);
		  adc_T  = IORD_ALTERA_AVALON_PIO_DATA(ADC_T_BASE);
		  adc_P  = IORD_ALTERA_AVALON_PIO_DATA(ADC_P_BASE);

		  var1 = ((adc_T)/16384-(dig_T1)/1024)*(dig_T2);
		  var2 = (((adc_T)/131072-(dig_T1)/8192)*((adc_T)
		                /131072-(dig_T1)/8192))*(dig_T3);

		  t_fine = (alt_u16)(var1+var2);

		  T = (var1+var2)/5120;

		  var1 = (t_fine/2)-64000;
		  var2 = var1*var1*(dig_P6)/32768;
		  var2 = var2 +var1*(dig_P5)*2;
		  var2 = (var2/4)+((dig_P4)*65536);
		  var1 = ((dig_P3)*var1*var1/524288.0+(dig_P2)*var1)/524288;
		  var1 = (1+var1/32768)*(dig_P1);
		  p = 1048576-adc_P;
		  p = (p-(var2/4096))*6250.0/var1;
		  var1 = (dig_P9)*p*p/2147483648;
		  var2 = p*(dig_P8)/32768;
		  p = p+(var1+var2+(dig_P7))/16;

		  printf("%d\r\n",p);

		  //------心率-----
		  if(i=(BUFFER_SIZE-1))
		  {
			  i=0;
			  for(k=0;k<BUFFER_SIZE;k++)
			  {
				  un_ir_mean+=pun_ir_buffer[k];
			  }

			  un_ir_mean=un_ir_mean/BUFFER_SIZE;

			  for(k=0;k<BUFFER_SIZE;k++)
			  {
				  an_x[k] =pun_ir_buffer[k] - un_ir_mean;
			  }

			  for(k=0;k<BUFFER_SIZE-MA4_SIZE;k++)
			  {
				  n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
				  an_x[k]=  n_denom/(alt_u32)4;
			  }

			  for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
			  {
				  an_dx[k]= (an_x[k+1]- an_x[k]);
			  }


			  for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++)
			  {
				  an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
			  }

			  for(i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++)
			  {
				  s= 0;
				  for( k=i; k<i+ HAMMING_SIZE ;k++)
				  {
					  s -= an_dx[k] *auw_hamm[k-i] ;
			      }
			      an_dx[i]= s/ (alt_32)1146; // divide by sum of auw_hamm
			  }

			  n_th1=0; // threshold calculation
			  for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++)
			  {
				  n_th1 += ((an_dx[k]>0)? an_dx[k] : ((alt_32)0-an_dx[k])) ;
			  }

			  n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);




		  }

		  else
		  {
			  pun_ir_buffer [i] = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_0_BASE);
			  pun_red_buffer[i] = IORD_ALTERA_AVALON_PIO_DATA(MAX30102_1_BASE);
			  i++;
		  }




	  }


  }

  return 0;
}
